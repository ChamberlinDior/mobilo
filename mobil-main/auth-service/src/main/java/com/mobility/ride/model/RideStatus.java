// ============================
// src/main/java/com/mobility/ride/model/RideStatus.java
// ============================
package com.mobility.ride.model;

/**
 * üîÑ  Cycle de vie complet d‚Äôune course / livraison.
 *
 * <pre>
 * REQUESTED   ‚îÄ‚îê
 *             ‚ñº
 *  ACCEPTED   ‚Üí  EN_ROUTE  ‚Üí  ARRIVED  ‚Üí  WAITING  ‚Üí  IN_PROGRESS  ‚Üí  COMPLETED
 *                    ‚îÇ                           ‚Üò
 *                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ>  CANCELLED / NO_SHOW
 * </pre>
 *
 * ‚Ä¢ {@code SCHEDULED} est un √©tat ¬´ hors flux temps r√©el ¬ª r√©serv√© aux
 *   r√©servations futures (T > now).
 * ‚Ä¢ {@code WAITING} d√©marre quand le chauffeur d√©clenche ¬´ Arrived ¬ª ;
 *   la gr√¢ce (ex. 2 min) est g√©r√©e par WaitTimeService.
 * ‚Ä¢ {@code NO_SHOW} est pos√© automatiquement si le rider ne se pr√©sente
 *   pas avant la fin de la gr√¢ce.
 */
public enum RideStatus {

    /** Demande cr√©√©e, aucun chauffeur encore attribu√©. */
    REQUESTED,

    /** Chauffeur a accept√© la demande (verrouill√©). */
    ACCEPTED,

    /** Chauffeur en route vers le point de prise en charge. */
    EN_ROUTE,

    /** Chauffeur arriv√© au pickup (pas encore de passager). */
    ARRIVED,

    /** Attente payante apr√®s la p√©riode de gr√¢ce. */
    WAITING,

    /** Course planifi√©e pour une date future. */
    SCHEDULED,

    /** Passager √† bord / colis pris en charge. */
    IN_PROGRESS,

    /** Course termin√©e et pay√©e. */
    COMPLETED,

    /** Annul√©e (par rider, driver ou syst√®me) avant compl√©tion. */
    CANCELLED,

    /** Annulation automatique pour ¬´ no-show ¬ª. */
    NO_SHOW
}
